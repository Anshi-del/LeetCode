class Solution { 
    public int smallestDivisor(int[] nums, int threshold) {
        int max = Integer.MIN_VALUE;

        // Find the maximum element in nums
        for (int num : nums) {
            max = Math.max(max, num);
        }

        int low = 1, high = max;

        // Binary search for the smallest valid divisor
        while (low <= high) {
            int mid = (low + high) / 2;

            if (sumByD(nums, mid) <= threshold) {
                high = mid - 1; // Try a smaller divisor
            } else {
                low = mid + 1;  // Increase divisor to reduce sum
            }
        }

        return low; // The smallest valid divisor
    }

    // Helper function to compute sum of ceil(nums[i] / div)
    private int sumByD(int[] nums, int div) {
        int sum = 0;
        for (int num : nums) {
            sum += (num + div - 1) / div; // Efficient way to compute ceil(num / div)
        }
        return sum;
    }
}
